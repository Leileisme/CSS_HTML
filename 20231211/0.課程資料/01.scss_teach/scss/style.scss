*,
*::before,
*::after {
	box-sizing: border-box;
	list-style: none;
}

.container {
	width: 75%;
	padding-left: 15px;
	padding-right: 15px;
	margin: auto;
}

h1,
h2,
h3,
h4,
h5,
h6 {
	margin: 20px 0 20px;
}

p {
	margin-bottom: 1rem;
}

section {
	margin-bottom: 2rem;
}

/* CSS 原生變數 */
:root {
	--primary: #0d6efd;
	--secondary: #6c757d;
	--success: #198754;
	--info: #0dcaf0;
	--wrarning: #ffc107;
	--danger: #dc3545;
}

// 單行註解，不會編譯出去
/* 多行註解，會編譯出去 */

/* SCSS 變數 */
// 只要符合 CSS 規範的值可以設定為變數
$primary: #0d6efd;
$secondary: #6c757d;
$success: #198754;
$info: #0dcaf0;
$warning: #ffc107;
$danger: #dc3545;

$white: #fff;
$width: 200px;
$gradient: linear-gradient(0deg, rgb(0, 0, 50) 0%, rgb(0, 50, 200) 50%, rgb(0, 0, 255) 100%);
$border: 5px solid #fff;
$border-radius: 0.5rem;
$padding: 0.5rem;
$margin-bottom: 0.5rem;
$shadow: 0 0 5px rgba(0, 0, 0, 0.8);

h1 {
	background: $gradient;
	color: $white;
	border: $border;
	border-radius: $border-radius;
	padding: $padding;
	box-shadow: $shadow;
	margin-bottom: $margin-bottom;
}

/* 02 流程控制 */
// $number: 3;
// random() 為 Sass 內建函式提供亂數功能，範例 1~3 random
$number: random(3);
.mybox {
	width: 150px;
	height: 150px;
	display: flex;
	justify-content: center;
	align-items: center;

	@if ($number == 1) {
		background-color: red;
	} @else if($number == 2) {
		background-color: blue;
	} @else {
		background-color: green;
	}

	$stand: '白金之星';
	$master: '承太郎';
	/* 使用 and 兩運算式條件都成立 */
	@if ($stand== '白金之星' and $master== '承太郎') {
		color: white !important;
	} @else {
		color: yellow !important;
	}
	/* 使用 or 兩運算式其中之一成立，不能用 || */
	$isHeight: '高';
	$isRich: '富';
	$isHandsome: '帥';
	@if ($isHeight == '高' or $isRich == '窮' or $isHandsome == '不帥') {
		font-weight: bolder;
		font-size: 30px;
	}

	$box-width: 50px;
	@if not($box-width==100px) {
		border: 10px dashed yellow;
	}

	$mySpacing: 20px;
	/* 內建提供的函式，類似三元運算子，函式沒有 @ */
	outline: if($mySpacing > 10px, 10px solid green, 10px solid black);
}

// 包含 end，例子有 1~3
@for $i from 1 through 3 {
	// 插值語法用 #{}
	.through-#{$i} {
		width: 50px * $i;
		height: 50px * $i;
		display: inline-block;
		background: #aaa;
	}
}
// 不包含 end，例子只有 1~2，不包含 3
@for $i from 1 to 3 {
	.to-#{$i} {
		width: 50px * $i;
		height: 50px * $i;
		display: inline-block;
		background: #333;
	}
}

/* 嵌套巢狀(nested) */
#section03 {
	.menu {
		margin-top: 2rem;
		padding: 0;
		font-size: 0;
		li {
			display: inline-block;
			font-size: 1rem;
			width: 100px;
			text-align: center;
			a {
				display: block;
				background: black;
				color: white;
				text-decoration: none;
				padding: 0.5rem;
				// &符號可以表示父層選擇器
				&:hover {
					color: yellow;
					background: darkslateblue;
				}
			}
			& + li {
				border-left: 1px solid #fff;
			}
		}
	}
	li + li {
		border-left: 1px solid yellow;
	}
}

// & 與 clearfix
.clearfix {
	&::after {
		content: '';
		display: block;
		clear: both;
	}
}

// 建立三欄式版面
/*
  嵌套有利有弊，嵌套階層不控制，會產生 CSS 選擇器過長，檔案會變大
  因此在嵌套時，思考如何快速有效選擇到目標，
  一般使用 #id 限制一個大區塊，再選擇裡面的某個元件區塊，再選擇到目標
*/
#exercise {
	.row {
		display: flex;
	}

	.col {
		width: 31.333333%;
		margin: 1%;
		border: 1px solid #333;
		padding: 1rem;
		box-shadow: 0 0 10px rgba(0, 0, 0, 0.5);
		transition: 0.5s;
		.card {
			.card-body {
				a {
					text-decoration: none;
					color: red;
					&:hover {
						transform: translateY(-20px);
					}
				}
			}
		}
	}

	.card {
		a {
			text-decoration: none;
			color: red;
			&:hover {
				transform: translateY(-20px);
			}
		}
	}

	img {
		max-width: 100%;
	}
}

/* 04.extend(繼承、擴展) % */
/*  使用 CSS 選擇器擴展，擴展後會被編譯到 CSS 檔案中 */
// .extend {
// 	width: 100px;
// 	height: 100px;
// 	float: left;
// }

/*  使用佔位選擇器 % 擴展，擴展後不會被編譯到 CSS 檔案中 */
/* 擴展後的樣式會被群組打包在一起 */
%extend {
	width: 50px;
	height: 50px;
	float: left;
}

#extend {
	margin-top: 1rem;
	overflow: auto;
}

.box1 {
	@extend %extend;
	background: red;
}
.box2 {
	@extend %extend;
	background: green;
}
.box3 {
	@extend %extend;
	background: blue;
}

/* 05.計算 */
.box4 {
	/* 加法 */
	width: 50px + 50px;
	width: 50px + 50;
	height: 50px + 50px;

	/* 減法 */
	width: 100px - 50px;
	width: 100px - 50;
	height: 100px - 50px;

	/* 乘法 */
	width: 50px * 2; // 乘法必須一個是數字
	// width: 50px * 2px; // 編譯會錯誤
	height: 50px * 2;

	/* 除法 */
	// width: 100px / 2;
	width: (100px / 2); // 除法養成習慣加上括號

	$child: 500px;
	$mother: 10;
	height: $child / $mother; // 變數不需括號

	$child2: 10px;
	$mother2: 10px;
	line-height: $child2 / $mother2; // 分子、分母相除，單位會被削掉

	/* 取餘數 */
	margin-top: 20px % 100;

	$var1: 20px;
	$var2: 1vw;
	margin-bottom: calc($var1 + $var2);
}

/* 06.函式 */
/* 
  @function 與 @mixin 有點像，@function 必須使用 @return 來返回結果(符合 CSS 規範的值)
  @mixin 可以返回一段 CSS 樣式
*/
@function randomFont() {
	$result: random(3);
	@if ($result==1) {
		@return 20px;
	} @else if($result==2) {
		@return 40px;
	} @else {
		@return 60px;
	}
}

// 傳參數
@function boxLength1($length, $base) {
	@return $length * $base * 1px;
}

// 使用預設值，呼叫時不帶參數，會使用預設值
@function boxLength2($length: 100, $base: 1) {
	@return $length * $base * 1px;
}

.funcbox {
	width: 100px;
	height: 100px;
	color: white;
	font-size: randomFont();
	width: boxLength1(100, 2);
	height: boxLength2();
	background: deeppink;
}

// px to rem
// unit() 可以取得單位，內建函式
@function rem($px) {
	@if (unit($px) == 'px') {
		@return ($px / 16px) * 1rem;
	} @else {
		@return ($px / 16) * 1rem;
	}
}

.rem {
	font-size: rem(16px);
	padding: rem(48);
}

$baseFontSize: 14px;
$size: 2px;

// 計算字體大小
@function fontSize($level: 1) {
	@if ($level < 0) {
		$level: 1;
	}
	// 內建函式-四捨五入
	@return round($baseFontSize + $size * $level);
}

// 計算行高
$lineHeightLevel: 1.5;

@function lineHeight($fontSize) {
	@return ceil($fontSize * $lineHeightLevel);
}

// 計算欄位寬度
@function col-width($col-count) {
	@return (100% / $col-count);
}

#section06 {
	.container {
		p {
			font-size: fontSize(2); // 14 + 2 * 2 = 18
			line-height: lineHeight(fontSize(2)); // 18 * 1.5 = 27
		}
	}
	.row {
		display: flex;
		flex-wrap: wrap;
		.col {
			border: 1px solid #333;
			width: col-width(3);
			padding: 1%;
			margin: 1% 0;
		}
	}
}

/* 07.Mixins */
// 定義一個 mixin
@mixin mixinTry() {
	width: 100px;
	height: 100px;
	background: #333;
}

.mixinTry {
	@include mixinTry();
}

@mixin box($width, $height, $bg, $border, $outline) {
	width: $width;
	height: $height;
	background: $bg;
	border: $border;
	outline: $outline;
}

@mixin flex($main, $cross) {
	display: flex;
	justify-content: $main;
	align-items: $cross;
}

.boxflex {
	@include box(100px, 100px, red, 5px solid #333, 5px solid yellow);
	@include flex(center, center);
}

.btn {
	display: inline-block;
	color: #fff;
	text-decoration: none;
	line-height: 1.5;
	padding: 0.3rem 0.75rem;
	margin: 0 0.2rem;
	border-radius: 0.25rem;
}

@mixin btn-bg($bgColor) {
	& {
		background-color: $bgColor;
	}

	&:hover {
		@if ($bgColor == #000) {
			// lighten 變亮，內建函式
			background-color: lighten($bgColor, 20%);
		} @else {
			// darken 變暗，內建函式
			background-color: darken($bgColor, 10%);
		}
	}
}

.btn-dark {
	@include btn-bg(#000);
}

.btn-primary {
	@include btn-bg($primary);
}

.btn-success {
	@include btn-bg($success);
}

.btn-danger {
	@include btn-bg($danger);
}

/* 08.使用 mixin + @content 設計 RWD */
$breakpoint-sm: 576px;
$breakpoint-md: 768px;
$breakpoint-lg: 992px;
$breakpoint-xl: 1200px;
$breakpoint-xxl: 1400px;

// 不需要傳參數，() 可以省略
@mixin sm {
	@media (min-width: $breakpoint-sm) {
		@content;
	}
}
@mixin md {
	@media (min-width: $breakpoint-md) {
		@content;
	}
}
@mixin lg {
	@media (min-width: $breakpoint-lg) {
		@content;
	}
}
@mixin xl {
	@media (min-width: $breakpoint-xl) {
		@content;
	}
}
@mixin xxl {
	@media (min-width: $breakpoint-xxl) {
		@content;
	}
}

#section08 {
	// xs
	.container {
		width: 100%;
	}

	.row {
		display: flex;
		flex-wrap: wrap;
	}

	.col {
		width: 100%;
	}

	.col + .col {
		margin-top: 20px;
	}

	// sm
	@include sm {
		.container {
			width: 75%;
		}
		.col {
			width: 50%;
		}
		.col + .col {
			margin-top: 0;
		}
	}

	// md
	@include md {
		.col {
			width: 33.333333%;
		}
	}

	// lg
	@include lg {
		.col {
			width: 25%;
		}
	}

	// xl
	@include xl {
		.col {
			width: 20%;
		}
	}

	// xxl
	@include xxl {
		.col {
			width: 10%;
		}
	}
}

/* list 列表，他很像 JS 的陣列，索引從 1 開始取值，不是 0 */
/* 格式是逗號或者空格分隔裡面每一個 item */
$width_list: 100px, 200px, 300px;
$margin_list: 10px 20px 30px 40px;
$bgColor_list: red, green, blue;
$border_list: 1px solid red, 1px solid blue, 1px solid green;

/* nth(list, index) */
.list {
	width: nth($width_list, 1);
	width: nth($width_list, 2);
	width: nth($width_list, 3);
}

/* index(list, value) */
.index {
	line-height: index($width_list, 100px);
	line-height: index($width_list, 200px);
	line-height: index($width_list, 300px);
}

/* length($list) */
.length {
	z-index: length($bgColor_list);
}

/* 配合 @for 使用 */
/* # {} 像 js 的 ${} => 模板語法或是插值語法 */
@for $i from 1 through length($bgColor_list) {
	.bg-#{nth($bgColor_list, $i)} {
		background-color: nth($bgColor_list, $i);
	}
}

@each $value in $bgColor_list {
	.each-bg-#{$value} {
		background-color: $value;
	}
}

/* map */
/* map 像 js 的一般物件 */
$map1: (
	primary: red,
	secondary: green,
	warning: blue
);

.nth-map {
	color: nth($map1, 1);
}

/* 對 map 物件取出 key/value */
@each $key, $value in $map1 {
	.bg-#{$key} {
		background-color: $value;
	}
}
// key/value
/* 
	const students = [{
			name: 'kaifu',
			age: 18
			skill:{
				s1:'睡覺',
				s2:'吃飯'
			}
		},
		{
			name: '小明',
			age: 18
			skill:{
				s1:'睡覺',
				s2:'吃飯'
			}
		}
	]
	students[0].name => 'kaifu'
	students[1].name => '小明'
*/
$map2: (
	default: (
		width: 100px,
		height: 100px
	),
	box1: (
		width: 200px,
		height: 200px
	),
	box2: (
		width: 300px,
		height: 300px
	)
);

// map-get(map, key)
@each $key, $value in $map2 {
	$width: map-get($value, width);
	$height: map-get($value, height);
	.bth-#{$key} {
		width: $width;
		height: $height;
	}
}
